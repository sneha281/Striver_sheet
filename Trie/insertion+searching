#include<bits/stdc++.h>
using namespace std;

class TrieNode{
    public: 
    char data ; 
    TrieNode* childern[26];
    bool isTerminal;
    
    TrieNode(char ch){
        data = ch;
        for(int i =0; i<26;i++){
            childern[i] = NULL;
        }
        isTerminal = false;
        
    }
    
};

class Trie{
    public:
    TrieNode* root;
    
    Trie(){
        root = new TrieNode('\0');
    }
    
    void insertUtil(TrieNode* root , string word){
        if(word.length()==0){
            root->isTerminal = true;
            return ;
        }
        
        
        //for capital alphabet
        int index = word[0] - 'A';
        TrieNode* child;
        
        //present
        if(root->childern[index]!=NULL){
            child = root->childern[index];
        }
        
        //absent
        else{
            child = new TrieNode(word[0]);
            root->childern[index] = child;
        }
        insertUtil(child , word.substr(1));
    }
    void insert(string word){
        insertUtil(root , word);
    }
    
    bool searchUtil(TrieNode* root , string word){
        if(word.length()==0){
            return root->isTerminal;
        }
        
        int index = word[0] - 'A';
        TrieNode* child;
        
        if(root->childern[index]!=NULL){
            child = root->childern[index];
        }
        else return false;
        
      return   searchUtil(child , word.substr(1));
    }
    
    bool search(string word){
        return searchUtil(root , word);
    }
};

int main(){
    Trie *t = new Trie();
    
    t->insert("abcd");
    cout<<t->search("abcd");
    
}
