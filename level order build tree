#include<bits/stdc++.h>
using namespace std;
class node{
    public:
    int data;
    node* left;
    node* right;
    
    //constructor 
    node(int d){
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};
/* node* buildTree(node* root){
    cout<<"enter the data  "<<endl;
    int data;
    cin>>data;
    root = new node(data);
    //base case
    if(data==-1){
        return NULL;
    }
    
    cout<<"enter the data for inserting in left of  "<<data<<endl;
    root->left =  buildTree(root->left);
    cout<<"enter the data for inserting in right of  "<<data<<endl;
    root->right = buildTree(root->right);
    
    return root;
}*/

void levelOrderTraversal(node* root){
    queue<node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        
        node* temp = q.front();
        //1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1
       q.pop();
        if(temp==NULL){
            //PURANA LEVEL COMPLETE TRAVERSE
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        //agr root m value h to else m junge
            else{
                 cout<<temp->data<<" ";
               
                if(temp->left){
            q.push(temp->left);
            
        }
        if(temp->right){
            q.push(temp->right);
        }
            }
        }
        
        
    }
/*void inorder(node* root){
    if(root==NULL ){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
    
}*/
void buildFromLevelOrder(node* &root){
    queue<node*>q;
    
    cout<<"enter data for root";
    int data; 
    cin>>data;
    root = new node(data);
    q.push(root);
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        cout<<"enter left node for "<<temp->data<<endl;
        int leftNode;
        cin>>leftNode;
        if(leftNode!=-1){
            temp->left = new node(leftNode);
            q.push(temp->left);
        
        }
         cout<<"enter right node for "<<temp->data<<endl;
        int rightNode;
        cin>>rightNode;
        if(rightNode!=-1){
            temp->right = new node(rightNode);
            q.push(temp->right);
    }
}
}

int main(){
    node* root = NULL;
   
   buildFromLevelOrder(root);
   levelOrderTraversal(root);
   
   // root = buildTree(root);
    //levelOrderTraversal(root);
    //inorder(root);
}#include<bits/stdc++.h>
using namespace std;
class node{
    public:
    int data;
    node* left;
    node* right;
    
    //constructor 
    node(int d){
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};
/* node* buildTree(node* root){
    cout<<"enter the data  "<<endl;
    int data;
    cin>>data;
    root = new node(data);
    //base case
    if(data==-1){
        return NULL;
    }
    
    cout<<"enter the data for inserting in left of  "<<data<<endl;
    root->left =  buildTree(root->left);
    cout<<"enter the data for inserting in right of  "<<data<<endl;
    root->right = buildTree(root->right);
    
    return root;
}*/

void levelOrderTraversal(node* root){
    queue<node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        
        node* temp = q.front();
        //1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1
       q.pop();
        if(temp==NULL){
            //PURANA LEVEL COMPLETE TRAVERSE
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        //agr root m value h to else m junge
            else{
                 cout<<temp->data<<" ";
               
                if(temp->left){
            q.push(temp->left);
            
        }
        if(temp->right){
            q.push(temp->right);
        }
            }
        }
        
        
    }
/*void inorder(node* root){
    if(root==NULL ){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
    
}*/
void buildFromLevelOrder(node* &root){
    queue<node*>q;
    
    cout<<"enter data for root";
    int data; 
    cin>>data;
    root = new node(data);
    q.push(root);
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        cout<<"enter left node for "<<temp->data<<endl;
        int leftNode;
        cin>>leftNode;
        if(leftNode!=-1){
            temp->left = new node(leftNode);
            q.push(temp->left);
        
        }
         cout<<"enter right node for "<<temp->data<<endl;
        int rightNode;
        cin>>rightNode;
        if(rightNode!=-1){
            temp->right = new node(rightNode);
            q.push(temp->right);
    }
}
}

int main(){
    node* root = NULL;
   
   buildFromLevelOrder(root);
   levelOrderTraversal(root);
   
   // root = buildTree(root);
    //levelOrderTraversal(root);
    //inorder(root);
}
